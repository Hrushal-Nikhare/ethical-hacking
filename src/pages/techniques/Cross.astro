---
import Layout from "../../layouts/Layout.astro";
import Rounded from "../../components/Rounded.astro";
import Nextbut from "../../components/nextbut.astro";
---

<style>
  .center {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  h1{
    text-align: center;
  }
  h1{
    font-size: 3rem;
  }
  h3{
    font-size: 1.5rem;
  }
  .content {
    padding: 1rem;
  }
</style>
<Layout title="Cross-site scripting">
  <Rounded>
<div class="content">

  <h1>Cross-site scripting (XSS):</h1>
  <br />
  <h3>
  Cross-site scripting (XSS) is a type of security vulnerability that allows attackers to inject malicious code into web pages viewed by other users. The attacker can use this code to steal sensitive information, such as login credentials, credit card numbers, or other personal data, or to perform actions on behalf of the victim, such as sending spam or installing malware.<br><br>
  
  XSS attacks typically occur when a web application does not properly validate user input and fails to sanitize any data entered by users. This allows attackers to insert malicious code, such as JavaScript, into web pages that will then be executed by the victim's browser.<br><br>
  
  There are three main types of XSS attacks:<br>
  
  <ol>
      <li><b>Reflected XSS:</b> In a reflected XSS attack, the attacker injects malicious code into a link or other input that is then reflected back to the user. For example, the attacker might send the victim a link that contains malicious code, and when the victim clicks on the link, the code is executed in their browser.</li>
      <li><b>Stored XSS:</b> In a stored XSS attack, the attacker injects malicious code into a web page that is then stored on the server and served to all users who view the page. This can be particularly dangerous if the web page contains sensitive information, such as login credentials or financial data.</li>
      <li><b>DOM-based XSS:</b> In a DOM-based XSS attack, the attacker exploits a vulnerability in the victim's browser rather than the web application itself. The attacker can inject malicious code into the victim's browser by manipulating the Document Object Model (DOM) used to create and manipulate web pages.</li>
  </ol>
  
  To prevent XSS attacks, web developers should follow best practices for input validation and output encoding. This includes sanitizing all user input to remove any potentially malicious code, and encoding all output to prevent it from being interpreted as code by the browser. Users can also protect themselves by being cautious about clicking on links or entering information into web forms, particularly on unfamiliar websites or those that do not use HTTPS encryption.<br><br>
  
  By taking these steps, web developers and users can reduce the risk of XSS attacks and protect sensitive information from being stolen or compromised by malicious actors.
  </h3>
  

</div>
    <br>
    <div class="center">
      <Nextbut url="/Common" size="50" />
    </div>
    <br>
  </Rounded>
</Layout>
